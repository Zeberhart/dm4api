line,id,speaker,text,ami_label,link,relationship,api_labels,topic,entities
1,0,Programmer,"Hi Apiza,",BE-POSITIVE,,,,,
1,1,Programmer,how's it going?,ELICIT-INFORM,,,,,
2,2,Apiza,Hello,BE-POSITIVE,0,POS,,,
3,3,Programmer,How was your day?,ELICIT-INFORM,,,,,
4,4,Apiza,I am well.,INFORM,3,POS,,,
5,5,Programmer,It was hot here today.,INFORM,,,,,
5,6,Programmer,How is the weather where you are?,ELICIT-INFORM,5,FOL,,,
6,7,Apiza,The weather here is warm with thunderstorms.,INFORM,6,POS,,,
7,8,Programmer,I'm just outside Chicago.,INFORM,,,,,
7,9,Programmer,Are you located in South Bend?,ELICIT-INFORM,8,FOL,,,
8,10,Apiza,"My current location is Cleveland, OH, United States.",INFORM,9,POS,,,
9,11,Programmer,"Apiza, what is the command to create a new ssh_session in the libssh API?",ELICIT-INFORM,,,patterns,ssh_session,
10,12,Apiza,The command to create a new ssh session is:\n,INFORM,11,POS,patterns,ssh_session ssh_new,
10,13,Apiza,ssh_session ssh_new\t(\tvoid \t\t)\n\n,INFORM,12,CONT,basic,ssh_new,
10,14,Apiza,Description\nCreate a new ssh session.\n\n\n\n,INFORM,13,CONT,basic,ssh_new,
10,15,Apiza,"Returns\nA new ssh_session pointer, NULL on error.",INFORM,14,CONT,functionality,ssh_new,
11,16,Programmer,"Just to confirm, is the ssh_session type a pointer type?",ELICIT-INFORM,15,FOL,basic,ssh_session ssh_new,
12,17,Apiza,ssh_session is not a pointer type.,INFORM,16,POS,basic,ssh_session ssh_new,
13,18,Programmer,"But when you gave me the command to create a new ssh session, you said it ""Returns"" ""A new ssh_session pointer..."".",INFORM,17,UNC,,ssh_session ssh_new,
14,19,Programmer,I'm confused.,ASSESS,18,CONT,,,
15,20,Apiza,ssh_new returns a pointer to type ssh_session,INFORM,17,FOL,basic,ssh_session ssh_new,
16,21,Programmer,"OK,",COMMENT-ABOUT-UNDERSTANDING,20,POS,,,
16,22,Programmer, thanks for clarifying.,BE-POSITIVE,21,CONT,,,
17,23,Programmer,Next up: how do I connect to a host using the libssh API?,ELICIT-OFFER-OR-SUGGESTION,,,patterns,,
18,24,Apiza,"To connect to a host, try using the command:\n",SUGGEST,23,POS,patterns,ssh_connect,
18,25,Apiza,int ssh_connect\t(\tssh_session \tsession\t)\n\n,INFORM,24,CONT,basic,ssh_connect,
18,26,Apiza,Description\nConnect to the ssh server.\n\n,INFORM,25,CONT,basic,ssh_connect,
18,27,Apiza,"Parameters\nsession: The ssh session to connect.\n\nReturns\nSSH_OK on success, SSH_ERROR on error.\nSSH_AGAIN, if the session is in nonblocking mode, and call must be done again.\n\n",INFORM,26,CONT,functionality,ssh_connect,
18,28,Apiza,See also\nssh_new()\nssh_disconnect(),INFORM,27,CONT,,ssh_connect,
19,29,Programmer,Thank you.,BE-POSITIVE,28,POS,,,
20,30,Programmer,"Also, how do I authenticate a server in the libssh API? ",ELICIT-OFFER-OR-SUGGESTION,,,patterns,,
20,31,Programmer,"And in the libssh API, how do I authenticate a user to a server?",ELICIT-OFFER-OR-SUGGESTION,,,patterns,,
21,32,Apiza,"To authenticate a server, try using the command:\n",SUGGEST,30,POS,patterns,ssh_is_server_known,
21,33,Apiza,int ssh_is_server_known\t(\tssh_session \tsession\t)\n\n,INFORM,32,CONT,basic,ssh_is_server_known,
21,34,Apiza,Description\nCheck if the server is known.\nChecks the user's known host file for a previous connection to the current server.\n\n,INFORM,33,CONT,functionality,ssh_is_server_known,
21,35,Apiza,Parameters\nsession: The SSH session to use.\n\n,INFORM,34,CONT,basic,ssh_is_server_known,
21,36,Apiza,"Returns\nSSH_SERVER_KNOWN_OK: The server is known and has not changed.\nSSH_SERVER_KNOWN_CHANGED: The server key has changed. Either you are under attack or the administrator changed the key. You HAVE to warn the user about a possible attack.\nSSH_SERVER_FOUND_OTHER: The server gave use a key of a type while we had an other type recorded. It is a possible attack.\nSSH_SERVER_NOT_KNOWN: The server is unknown. User should confirm the MD5 is correct.\nSSH_SERVER_FILE_NOT_FOUND: The known host file does not exist. The host is thus unknown. File will be created if host key is accepted.\nSSH_SERVER_ERROR: Some error happened.\n\nSee also\nssh_get_pubkey_hash()\nBug:\nThere is no current way to remove or modify an entry into the known host table.\n\nTo authenticate a user to a server, try using the command:\nint ssh_userauth_password\t(\tssh_session \tsession,\nconst char * \tusername,\nconst char * \tpassword \n)\n\nDescription\nTry to authenticate by password.\nThis authentication method is normally disabled on SSHv2 server. You should use keyboard-interactive mode.\nThe 'password' value MUST be encoded UTF-8. It is up to the server how to interpret the password and validate it against the password database. However, if you read the password in some other encoding, you MUST convert the password to UTF-8.\n\nParameters\nsession: The ssh session to use.\nusername: The username, this SHOULD be NULL.\npassword: The password to authenticate in UTF-8.\n\nReturns\nSSH_AUTH_ERROR: A serious error happened.\nSSH_AUTH_DENIED: Authentication failed: use another method\nSSH_AUTH_PARTIAL: You've been partially authenticated, you still have to use another method\nSSH_AUTH_SUCCESS: Authentication success\nSSH_AUTH_AGAIN: In nonblocking mode, you've got to call this again later.\n",INFORM,35,CONT,functionality quality patterns directives,ssh_is_server_known,
21,37,Apiza,Note\nMost server implementations do not permit changing the username during authentication. The username should only be set with ssh_options_set() only before you connect to the server.\n\n,INFORM,36,CONT,directives functionality,ssh_is_server_known,
21,38,Apiza,See also\nssh_userauth_none()\nssh_userauth_kbdint(),INFORM,37,CONT,,ssh_is_server_known,
22,39,Programmer,Sounds good.,ASSESS,38,POS,,,
22,40,Programmer,But how do I connect to a specific hostname using the libssh API?,ELICIT-OFFER-OR-SUGGESTION,38,FOL,patterns,,
23,41,Apiza,"Sorry, ",BE-POSITIVE,40,FOL,,,
23,42,Apiza,"what do you mean by ""specific hostname""?",ELICIT-INFORM,41,CONT,concepts,,
24,43,Programmer,"To be exact, I want to open a connection to localhost.",INFORM,42,POS,patterns,,
25,44,Apiza,Try using the command:\n,SUGGEST,40,POS,patterns,,
25,45,Apiza,"int ssh_channel_open_forward\t(\tssh_channel \tchannel,\nconst char * \tremotehost,\nint \tremoteport,\nconst char * \tsourcehost,\nint \tlocalport \n)\n\n",INFORM,44,CONT,basic,ssh_channel_open_forward,
25,46,Apiza,Description\nOpen a TCP/IP forwarding channel.\n\n,INFORM,45,CONT,functionality,ssh_channel_open_forward,
25,47,Apiza,Parameters\nchannel: An allocated channel.\nremotehost: The remote host to connected (host name or IP).\nremoteport: The remote port.\nsourcehost: The numeric IP address of the machine from where the connection request originates. This is mostly for logging purposes.\nlocalport: The port on the host from where the connection originated. This is mostly for logging purposes.\n\n,INFORM,46,CONT,functionality purpose,ssh_channel_open_forward,
25,48,Apiza,"Returns\nSSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again.",INFORM,47,CONT,functionality,ssh_channel_open_forward,
26,49,Programmer,OK.,ASSESS,48,POS,,,
27,50,Programmer,This code returns an SSH_ERROR: connection_status = ssh_connect(sess); ,INFORM,48,FOL,functionality,ssh_channel_open_forward,
27,51,Programmer,sess is an ssh_session which was returned from ssh_new(). ,INFORM,50,CONT,,ssh_channel_open_forward,
27,52,Programmer,What did I do wrong?,ELICIT-INFORM,51,FOL,functionality,ssh_channel_open_forward,
28,53,Apiza,I'm not sure what is wrong with This code returns an SSH_ERROR: connection_status = ssh_connect(sess); sess is an ssh_session which was returned from ssh_new().,INFORM,52,NEG,functionality,ssh_channel_open_forward,
29,54,Programmer,Can I pass ssh_connect a hostname?,ELICIT-INFORM,,,functionality basic,ssh_connect,
30,55,Apiza,ssh_connect() takes an ssh_session:\n,INFORM,54,PART,basic,ssh_connect,
30,56,Apiza,int ssh_connect\t(\tssh_session \tsession\t)\n\n,INFORM,55,CONT,basic,ssh_connect,
30,57,Apiza,Description\nConnect to the ssh server.\n\n,INFORM,56,CONT,basic,ssh_connect,
30,58,Apiza,"Parameters\nsession: The ssh session to connect.\n\nReturns\nSSH_OK on success, SSH_ERROR on error.\nSSH_AGAIN, if the session is in nonblocking mode, and call must be done again.\n\n",INFORM,57,CONT,functionality,ssh_connect,
30,59,Apiza,See also\nssh_new()\nssh_disconnect(),INFORM,58,CONT,,ssh_connect,
31,60,Programmer,How do I set the hostname for an SSH session?,ELICIT-OFFER-OR-SUGGESTION,,,patterns,,
32,61,Programmer,How do I use the ssh_disconnect command?,ELICIT-OFFER-OR-SUGGESTION,,,patterns,ssh_disconnect,
33,62,Apiza,"For setting the hostname, try using the command:\n",SUGGEST,60,POS,patterns,ssh_channel_open_forward,
33,63,Apiza,Try using the command:\n,OTHER,62,REP,patterns,ssh_channel_open_forward,
33,64,Apiza,"int ssh_channel_open_forward ( ssh_channel channel,\nconst char * remotehost,\nint remoteport,\nconst char * sourcehost,\nint localport \n)\n\n",INFORM,63,POS,basic,ssh_channel_open_forward,
33,65,Apiza,Description\nOpen a TCP/IP forwarding channel.\n\n,INFORM,64,CONT,functionality,ssh_channel_open_forward,
33,66,Apiza,Parameters\nchannel: An allocated channel.\nremotehost: The remote host to connected (host name or IP).\nremoteport: The remote port.\nsourcehost: The numeric IP address of the machine from where the connection request originates. This is mostly for logging purposes.\nlocalport: The port on the host from where the connection originated. This is mostly for logging purposes.\n\n,INFORM,65,CONT,functionality purpose,ssh_channel_open_forward,
33,67,Apiza,"Returns\nSSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again.",INFORM,66,CONT,functionality,ssh_channel_open_forward,
34,68,Apiza,The ssh_disconnect command is:\n,INFORM,61,POS,,ssh_disconnect,
34,69,Apiza,void ssh_disconnect\t(\tssh_session \tsession\t)\n\n,INFORM,68,CONT,basic,ssh_disconnect,
34,70,Apiza,Description\nDisconnect from a session (client or server).\nThe session can then be reused to open a new session.\n\n,INFORM,69,CONT,functionality directives,ssh_disconnect,
34,71,Apiza,Parameters\nsession: The SSH session to use.,INFORM,70,CONT,basic,ssh_disconnect,
35,72,Programmer,How do I open a channel in SSH?,ELICIT-OFFER-OR-SUGGESTION,,,patterns,ssh_channel,
36,73,Apiza,"To open a new channel in SSH, try:\n",SUGGEST,72,POS,patterns,ssh_channel,
36,74,Apiza,ssh_channel ssh_channel_new\t(\tssh_session \tsession\t)\n\n,INFORM,73,CONT,basic,ssh_channel_new,
36,75,Apiza,Description\nAllocate a new channel.\n\n,INFORM,74,CONT,basic,ssh_channel_new,
36,76,Apiza,Parameters\nsession: The ssh session to use.\n\n,INFORM,75,CONT,basic,ssh_channel_new,
36,77,Apiza,"Returns\nA pointer to a newly allocated channel, NULL on error.",INFORM,76,CONT,basic functionality,ssh_channel_new,
37,78,Programmer,How do I free an SSH session?,ELICIT-OFFER-OR-SUGGESTION,,,patterns,ssh_session,
38,79,Programmer,How many arguments does ssh_connect() accept?,ELICIT-INFORM,,,basic,ssh_connect,
39,80,Apiza,"To free an SSH session, try:\n",SUGGEST,78,POS,patterns,ssh_session,
39,81,Apiza,void ssh_free\t(\tssh_session \tsession\t)\n\n,INFORM,80,CONT,basic,ssh_free,
39,82,Apiza,Description\nDeallocate a SSH session handle.\n\n,INFORM,81,CONT,functionality,ssh_free,
39,83,Apiza,Parameters\nsession: The SSH session to free.\n\n,INFORM,82,CONT,basic,ssh_free,
39,84,Apiza,See also\nssh_disconnect()\nssh_new(),INFORM,83,CONT,,ssh_free,
40,85,Apiza,ssh_connect() takes one argument:\n,INFORM,79,POS,basic,ssh_connect,
40,86,Apiza,int ssh_connect\t(\tssh_session \tsession\t)\n\n,INFORM,85,CONT,basic,ssh_connect,
40,87,Apiza,Description\nConnect to the ssh server.\n\n,INFORM,86,CONT,basic,ssh_connect,
40,88,Apiza,Parameters\nsession: The ssh session to connect.\n\n,INFORM,87,CONT,basic,ssh_connect,
40,89,Apiza,"Returns\nSSH_OK on success, SSH_ERROR on error.\nSSH_AGAIN, if the session is in nonblocking mode, and call must be done again.\n\n",INFORM,88,CONT,functionality,ssh_connect,
40,90,Apiza,See also\nssh_new()\nssh_disconnect(),INFORM,89,CONT,,ssh_connect,
41,91,Programmer,"I need double quotes around strings in C, right?",ELICIT-INFORM,,,directives,,
42,92,Programmer,ssh_channel_open_forward() takes a long time and doesn't return any output. ,INFORM,,,functionality quality,ssh_channel_open_forward,
42,93,Programmer,Is this normal? ,ELICIT-INFORM,92,FOL,functionality quality,ssh_channel_open_forward,
42,94,Programmer,Is there a way to set a timeout?,ELICIT-INFORM,92,FOL,patterns,ssh_channel_open_forward,
43,95,Programmer,How do I set a hostname on an SSH session?,ELICIT-OFFER-OR-SUGGESTION,60,REP,patterns,,
44,96,Programmer,How do I set a hostname on an SSH channel?,ELICIT-OFFER-OR-SUGGESTION,,,patterns,,
45,97,Apiza,"Yes, strings, or char arrays, use double quotes.",INFORM,91,POS,directives,,
46,98,Apiza,"For channel timeout, try:\n",SUGGEST,94,POS,patterns,ssh_channel_poll_timeout,
46,99,Apiza,"int ssh_channel_poll_timeout\t(\tssh_channel \tchannel,\nint \ttimeout,\nint \tis_stderr \n)\n\n",INFORM,98,CONT,basic,ssh_channel_poll_timeout,
46,100,Apiza,"Description\nPolls a channel for data to read, waiting for a certain timeout.\n\n",INFORM,99,CONT,functionality,ssh_channel_poll_timeout,
46,101,Apiza,"Parameters\nchannel: The channel to poll.\ntimeout: Set an upper limit on the time for which this function will block, in milliseconds. Specifying a negative value means an infinite timeout. This parameter is passed to the poll() function.\nis_stderr: A boolean to select the stderr stream.\n\nReturns\nThe number of bytes available for reading, 0 if nothing is available (timeout elapsed), SSH_EOF on end of file, SSH_ERROR on error.\n\n",INFORM,100,CONT,functionality control,ssh_channel_poll_timeout,
46,102,Apiza,See also\nssh_channel_is_eof(),INFORM,101,CONT,,ssh_channel_poll_timeout,
47,103,Apiza,"For setting a hostname, try:\n",SUGGEST,95,POS,patterns,ssh_channel_open_forward,
47,104,Apiza,"int ssh_channel_open_forward\t(\tssh_channel \tchannel,\nconst char * \tremotehost,\nint \tremoteport,\nconst char * \tsourcehost,\nint \tlocalport \n)\n\n",INFORM,103,CONT,basic,ssh_channel_open_forward,
47,105,Apiza,Description\nOpen a TCP/IP forwarding channel.\n\n,INFORM,104,CONT,functionality,ssh_channel_open_forward,
47,106,Apiza,Parameters\nchannel: An allocated channel.\nremotehost: The remote host to connected (host name or IP).\nremoteport: The remote port.\nsourcehost: The numeric IP address of the machine from where the connection request originates. This is mostly for logging purposes.\nlocalport: The port on the host from where the connection originated. This is mostly for logging purposes.\n\n,INFORM,105,CONT,functionality purpose,ssh_channel_open_forward,
47,107,Apiza,"Returns\nSSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again.",INFORM,106,CONT,functionality,ssh_channel_open_forward,
48,108,Programmer,I tried that. ,INFORM,104,NEG,functionality,ssh_channel_open_forward,
48,109,Programmer,It locks.,INFORM,108,CONT,functionality,ssh_channel_open_forward,
49,110,Apiza,"For it locks, try:\n",SUGGEST,109,FOL,patterns,ssh_channel_set_blocking,
49,111,Apiza,"void ssh_channel_set_blocking\t(\tssh_channel \tchannel,\nint \tblocking \n)\n\n",INFORM,110,CONT,basic,ssh_channel_set_blocking,
49,112,Apiza,Description\nPut the channel into blocking or nonblocking mode.\n\n,INFORM,111,CONT,functionality,ssh_channel_set_blocking,
49,113,Apiza,Parameters\nchannel: The channel to use.\nblocking: A boolean for blocking or nonblocking.\n\n,INFORM,112,CONT,functionality,ssh_channel_set_blocking,
49,114,Apiza,See also\nssh_set_blocking(),INFORM,113,CONT,,ssh_channel_set_blocking,
50,115,Programmer,How do I set the hostname for a channel?,ELICIT-OFFER-OR-SUGGESTION,96,REP,patterns,,
51,116,Programmer,What are your goals in life?,ELICIT-INFORM,,,,,
52,117,Apiza,"For setting the hostname for a channel, try:\n",SUGGEST,115,POS,patterns,ssh_channel_open_forward,
52,118,Apiza,"int ssh_channel_open_forward\t(\tssh_channel \tchannel,\nconst char * \tremotehost,\nint \tremoteport,\nconst char * \tsourcehost,\nint \tlocalport \n)\n\n",INFORM,117,CONT,basic,ssh_channel_open_forward,
52,119,Apiza,Description\nOpen a TCP/IP forwarding channel.\n\n,INFORM,118,CONT,functionality,ssh_channel_open_forward,
52,120,Apiza,Parameters\nchannel: An allocated channel.\nremotehost: The remote host to connected (host name or IP).\nremoteport: The remote port.\nsourcehost: The numeric IP address of the machine from where the connection request originates. This is mostly for logging purposes.\nlocalport: The port on the host from where the connection originated. This is mostly for logging purposes.\n\n,INFORM,119,CONT,functionality purpose,ssh_channel_open_forward,
52,121,Apiza,"Returns\nSSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again.\n\n",INFORM,120,CONT,functionality,ssh_channel_open_forward,
52,122,Apiza,"or\n\nint ssh_channel_open_reverse_forward\t(\tssh_channel \tchannel,\nconst char * \tremotehost,\nint \tremoteport,\nconst char * \tsourcehost,\nint \tlocalport \n)\n\n",INFORM,121,CONT,basic,ssh_channel_open_reverse_forward,
52,123,Apiza,Description\nOpen a TCP/IP reverse forwarding channel.\n\n,INFORM,122,CONT,functionality,ssh_channel_open_reverse_forward,
52,124,Apiza,Parameters\nchannel: An allocated channel.\nremotehost: The remote host to connected (host name or IP).\nremoteport: The remote port.\nsourcehost: The source host (your local computer). It's optional and for logging purpose.\nlocalport: The source port (your local computer). It's optional and for logging purpose.\n\n,INFORM,123,CONT,functionality  purpose,ssh_channel_open_reverse_forward,
52,125,Apiza,"Returns\nSSH_OK on success, SSH_ERROR if an error occurred, SSH_AGAIN if in nonblocking mode and call has to be done again.",INFORM,124,CONT,functionality,ssh_channel_open_reverse_forward,
53,126,Programmer,"Apiza, how do I execute a command on an SSH channel?",ELICIT-OFFER-OR-SUGGESTION,,,patterns,ssh_channel,
54,127,Apiza,Here are the functions related to ssh_channel:\n,INFORM,126,PART,structure,ssh_channel,
54,128,Apiza,channel_read_buffer\nssh_channel_accept_forward\nssh_channel_accept_x11\nssh_channel_cancel_forward\nssh_channel_change_pty_size\nssh_channel_close\nssh_channel_free\nssh_channel_get_exit_status\nssh_channel_get_session\nssh_channel_is_closed\nssh_channel_is_eof\nssh_channel_is_open\nssh_channel_listen_forward\nssh_channel_new\nssh_channel_open_auth_agent\nssh_channel_open_forward\nssh_channel_open_reverse_forward\nssh_channel_open_session\nssh_channel_open_x11\nssh_channel_poll\nssh_channel_poll_timeout\nssh_channel_read\nssh_channel_read_nonblocking\nssh_channel_read_timeout\nssh_channel_request_auth_agent\nssh_channel_request_env\nssh_channel_request_exec\nssh_channel_request_pty\nssh_channel_request_pty_size\nssh_channel_request_send_break\nssh_channel_request_send_exit_signal\nssh_channel_request_send_exit_status\nssh_channel_request_send_signal\nssh_channel_request_shell\nssh_channel_request_subsystem\nssh_channel_request_x11\nssh_channel_select\nssh_channel_send_eof\nssh_channel_set_blocking\nssh_channel_set_counter\nssh_channel_window_size\nssh_channel_write\nssh_channel_write_stderr,INFORM,127,CONT,structure,ssh_channel,
55,129,Programmer,What are the functions related to SSH sessions?,ELICIT-INFORM,,,structure,ssh_session,
56,130,Programmer,How do I use the ssh_channel_request_exec() command?,ELICIT-INFORM,128,FOL,patterns,ssh_channel_request_exec,
57,131,Apiza,Here are the functions related to ssh_session:\n,INFORM,129,POS,structure,ssh_session,
57,132,Apiza,ssh_blocking_flush\nssh_clean_pubkey_hash\nssh_connect\nssh_disconnect\nssh_dump_knownhost\nssh_free\nssh_get_cipher_in\nssh_get_cipher_out\nssh_get_clientbanner\nssh_get_disconnect_message\nssh_get_fd\nssh_get_hexa\nssh_get_hmac_in\nssh_get_hmac_out\nssh_get_issue_banner\nssh_get_kex_algo\nssh_get_openssh_version\nssh_get_poll_flags\nssh_get_pubkey_hash\nssh_get_publickey\nssh_get_publickey_hash\nssh_get_serverbanner\nssh_get_server_publickey\nssh_get_status\nssh_get_version\nssh_is_blocking\nssh_is_connected\nssh_is_server_known\nssh_new\nssh_options_copy\nssh_options_get\nssh_options_getopt\nssh_options_get_port\nssh_options_parse_config\nssh_options_set\nssh_print_hexa\nssh_select\nssh_send_debug\nssh_send_ignore\nssh_set_blocking\nssh_set_counters\nssh_set_fd_except\nssh_set_fd_toread\nssh_set_fd_towrite\nssh_silent_disconnect\nssh_write_knownhost,INFORM,131,CONT,structure,ssh_session,
58,133,Apiza,Here is the documentation for ssh_channel_request_exec:\n,INFORM,130,POS,,ssh_channel_request_exec,
58,134,Apiza,"int ssh_channel_request_exec\t(\tssh_channel \tchannel,\nconst char * \tcmd \n)\n\n",INFORM,133,CONT,basic,ssh_channel_request_exec,
58,135,Apiza,Description\nRun a shell command without an interactive shell.\nThis is similar to \'sh -c command\'.\n\n,INFORM,134,CONT,functionality,ssh_channel_request_exec,
58,136,Apiza,"Parameters\nchannel: The channel to execute the command.\ncmd: The command to execute (e.g. ""ls ~/ -al | grep -i reports"").\n\n",INFORM,135,CONT,functionality examples,ssh_channel_request_exec,
58,137,Apiza,"Example:\n\nrc = channel_request_exec(channel, ""ps aux"");\nif (rc &gt; 0) {\n return -1;\n}\nwhile ((rc = channel_read(channel, buffer, sizeof(buffer), 0)) &gt; 0) {\n if (fwrite(buffer, 1, rc, stdout) != (unsigned int) rc) {\n return -1;\n }\n}\n\n",INFORM,136,CONT,examples,ssh_channel_request_exec,
58,138,Apiza,See also\nssh_channel_request_shell(),INFORM,137,CONT,,ssh_channel_request_exec,
59,139,Programmer,Thanks for your help today. ,BE-POSITIVE,,,,,
59,140,Programmer,It was great to meet you!,BE-POSITIVE,,,,,
60,141,Programmer,What are your plans for the future?,ELICIT-INFORM,,,,,